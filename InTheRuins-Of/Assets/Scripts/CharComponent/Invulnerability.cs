using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;

namespace CharacterComponentSystem {
  [RequireComponent(typeof(HP))]
  public class Invulnerability : HPModifier {

    public bool invulnerable;
    public HP hp;

    [Tooltip("Invoked in LateUpdate if invulnerability was gained")]
    public UnityEvent onGainInvulnerability;

    [Tooltip("Invoked in LateUpdate if invulnerability was lost")]
    public UnityEvent onLoseInvulnerability;

    public static implicit operator bool(Invulnerability i) => i != null && i.invulnerable;


    protected bool prevInvul;


    void Start() {
      if (hp == null) hp = GetComponent<HP>();
      if (hp == null) throw new UnityException("No health component specified and none found on the GameObject");
      prevInvul = invulnerable;
      hp.damageModifiers.Add((damage, orig) => {
        return invulnerable ? 0 : damage;
      });
    }

    void LateUpdate() {
      if (prevInvul == invulnerable) return;

      if (invulnerable) onGainInvulnerability.Invoke();
      else onLoseInvulnerability.Invoke();
      prevInvul = invulnerable;
    }
  }
}
