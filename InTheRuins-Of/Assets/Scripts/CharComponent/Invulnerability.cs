using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;

[RequireComponent(typeof(HP))]
public class Invulnerability : MonoBehaviour {

  [SerializeField] public bool invulnerable;

  [Tooltip("Priority of damage filter applied by this component")]
  public float priority = 0;

  [Tooltip("Whether or not to prevent set health")]
  public bool filterSet = false;

  [MyBox.ConditionalField(nameof(filterSet))]
  [Tooltip("Priority of set health filter applied by this component")]
  public float setPriority = 0;

  public bool prevInvul { get; protected set; }

  [HideInInspector]
  public HP hp;


  [Tooltip("Invoked in LateUpdate if invulnerability was gained")]
  public UnityEvent onGainInvulnerability;

  [Tooltip("Invoked in LateUpdate if invulnerability was lost")]
  public UnityEvent onLoseInvulnerability;


  public static implicit operator bool(Invulnerability i) => i != null && i.invulnerable;



  void Start() {
    hp = GetComponent<HP>();
    prevInvul = invulnerable;
    hp.damageFilters.Add((float damage) => {
      return invulnerable ? 0 : damage;
    });
  }

  void LateUpdate() {
    if (prevInvul == invulnerable) return;

    if (invulnerable) onGainInvulnerability.Invoke();
    else onLoseInvulnerability.Invoke();
    prevInvul = invulnerable;
  }

}
